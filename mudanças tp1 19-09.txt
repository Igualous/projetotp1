ALTERAÇÕES (HEADER dominios.hpp)
Gerais

getValor() de todas as classes marcado como const.

Parâmetros string em validar(...) e setValor(...) passaram para const string& (evita cópia).

Nomes de parâmetros tornados mais claros (ex.: dia, mes, ano, telefone, email, codigo etc.).

Mantido using namespace std;.

Por classe

Capacidade: int getValor() const; (antes sem const).

Cartao: bool validar(const string& numero); bool setValor(const string& numero); string getValor() const;.

Codigo: bool validar(const string& codigo); bool setValor(const string& codigo); string getValor() const;.

Data:

Renomeado e padronizado: static bool isBissexto(int ano);

bool validar(int dia, const string& mes, int ano);

bool setValor(int dia, const string& mes, int ano);

string getValor() const;

Dinheiro:

Definido que o valor é em centavos.

const int MIN = 1; const int MAX = 100000000; (R$ 0,01 a R$ 1.000.000,00).

int getValor() const; (retorna centavos).

Email:

Agora explicita dois limites no header (como você ajustou): LIM_LOCAL = 64 e LIM_DOMINIO = 255.

bool validar(const string& email); bool setValor(const string& email); string getValor() const;.

Endereco: bool validar(const string& endereco); bool setValor(const string& endereco); string getValor() const;.

Nome: bool validar(const string& nome); bool setValor(const string& nome); string getValor() const;.

Numero:

Corrigido o getter: int getValor() const; (antes tinha assinatura errada com parâmetro).

Ramal: int getValor() const;.

Senha: bool validar(const string& senha); bool setValor(const string& senha); string getValor() const;.

Telefone:

Mudança de tipo do atributo: de int → string.

Assinaturas: bool validar(const string& telefone); bool setValor(const string& telefone); string getValor() const;.

Constante TAMANHO = 15 (formato + + 14 dígitos).

IMPLEMENTAÇÕES (SOURCE dominios.cpp)
P0 (sincronização + correções críticas)

Incluídos headers necessários: <algorithm>, <map>, <vector>, <cctype>; using namespace std;.

Capacidade: validação 1..4, setValor simples.

Cartao: validação Luhn (16 dígitos) + setValor.

Codigo: validação exatamente 10 com apenas a–z minúsculas e 0–9 (substitui isalnum, que aceitava maiúsculas).

Data:

Corrigido intervalo de ano 2000..2999 (antes lógica invertida).

Corrigida chamada de bissexto para isBissexto(ano) (antes testava o ponteiro da função).

Normalização do mes para maiúsculo e checagem em {JAN..DEZ}.

Dias por mês com ajuste de fevereiro quando bissexto.

valor formatado como "dia-MES-ano" com hífens.

Dinheiro: validação em centavos 1..100000000, setValor guarda centavos.

Telefone:

Trocado para string e validação exatamente 15: telefone[0] == '+' e 14 dígitos nos demais.

P1 (implementações restantes)

Email:

Adicionados helpers parteLocalOk, rotuloDominioOk, dominioOk.

Usadas as constantes do header: Email::LIM_LOCAL (64) e Email::LIM_DOMINIO (255) no .cpp (patch aplicado).

Regras: parte local (a–z, dígitos, . e -; sem começar/terminar com ./-; ./- devem ser seguidos de letra/dígito; ≤64). Domínio (rótulos separados por ., com a–z/dígitos/-, sem começar/terminar com -; domínio ≤255; não termina com .).

Endereco:

5..30; caracteres permitidos: letras, dígitos, vírgula, ponto, espaço.

Não começa/termina com vírgula/ponto/espaço.

Regras de sequência: vírgula/ponto não seguidos por vírgula/ponto; espaço deve ser seguido por letra/dígito.

Nome:

5..20; apenas letras e espaço; sem espaços duplos; não inicia/termina com espaço.

Cada termo inicia com maiúscula.

Numero: validação 1..999.

Ramal: validação 0..50.

Senha:

Exatamente 5 caracteres.

Alfabeto permitido: letras (A–Z a–z), dígitos (0–9) e especiais !"#$%&?.

Sem 2 letras consecutivas e sem 2 dígitos consecutivos.

Deve conter ao menos: 1 minúscula, 1 maiúscula, 1 dígito, 1 especial.

Auxiliares adicionados no .cpp

static bool parteLocalOk(const string& parteLocal);

static bool rotuloDominioOk(const string& rotulo);

static bool dominioOk(const string& dominio);

static bool ehEspecialSenha(unsigned char c);

Decisões de projeto (relevantes para o grupo)

Dinheiro armazenado em centavos (inteiro) para evitar problemas de arredondamento.

Telefone definido como string (por causa do + e preservação de zeros à esquerda).

const string& nos parâmetros de leitura (eficiência e segurança).

Const-correctness em getters.

Nomes claros em parâmetros e variáveis (acordo do time).

Email com uso explícito das constantes do header (evita “números mágicos”).

O que ainda falta (próxima etapa)

Política de exceções (RNF 7): trocar setValor(...) -> bool por lançar ValidationError (ou expor setOrThrow(...)), e padronizar mensagens.

(Se quiser) tests de unidade por domínio (um caso válido e um inválido cada) — posso te dar um tests.cpp com mini-harness.

Depois seguimos para RF/RNF, modelo conceitual e arquitetura do sistema completo.